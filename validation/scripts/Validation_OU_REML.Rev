################################################################################
#
# RevBayes Validation Test: Ornstein-Uhlenbeck on a fixed tree
#
# Model: Continuous character(s) evolve under Ornstein-Uhlenbeck model.
#
#
# authors: Sebastian Hoehna
#
################################################################################

## Global settings

NUM_VALIDATION_REPLICATES = 1000
NUM_MCMC_ITERATIONS       = 10000


# create the monitor and moves vectors
moves     = VectorMoves()
monitors  = VectorMonitors()


#######################
# Reading in the Data #
#######################

data <- readContinuousCharacterData("data/primates_lhtlog.nex")

data.excludeAll()
data.includeCharacter(1)

# Get some useful variables from the data. We need these later on.
taxa <- data.taxa()



#######################
# OU-Model Parameters #
#######################


sigma ~ dnLognormal( ln(10.0), sd=0.587405 )
optimum ~ dnUniform(-10,10)
#root_state ~ dnUniform(-10,10)
attraction ~ dnExponential(10.0)

moves.append( mvScale(sigma, lambda=1.0, tune=true, weight=2.0) )
moves.append( mvSlide(optimum, delta=1.0, tune=true, weight=2.0) )
#moves.append( mvSlide(root_state, delta=1.0, tune=true, weight=2.0) )
moves.append( mvScale(attraction, lambda=1.0, tune=true, weight=2.0) )

root_state := optimum

##############
# Tree model #
##############


psi <- readTrees( "data/primates.tree" )[1]



###################
# PhyloCTMC Model #
###################

# We use an empirical estimate of the clock rate which is 0.01 (=1%) per mvillion years per site
traits ~ dnPhyloOrnsteinUhlenbeckREML(psi, sigma=sigma, alpha=attraction, theta=optimum, rootState=root_state, nSites=1)

# attach the data
traits.clamp(data)



#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(psi)


mymcmc = mcmc(mymodel, monitors, moves)

validation = validationAnalysis( mymcmc, NUM_VALIDATION_REPLICATES, directory="output_OU_REML" )
validation.burnin(generations=0.1*NUM_MCMC_ITERATIONS,tuningInterval=100)
validation.run(generations=NUM_MCMC_ITERATIONS)
validation.summarize(coverageProbability=0.9)
validation.summarize(coverageProbability=0.5)


# you may want to quit RevBayes now
q()
