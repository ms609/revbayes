################################################################################
#
# RevBayes Validation Test: Episodic birth-death process
#
# Model: A episodic birth-death process with uniform taxon sampling.
#
#
# authors: Sebastian Hoehna
#
################################################################################

## Global settings

NUM_VALIDATION_REPLICATES = 1000
NUM_MCMC_ITERATIONS       = 10000


# create the monitor and moves vectors
moves     = VectorMoves()
monitors  = VectorMonitors()

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes


tree <- readTrees( "data/primates.tree" )[1]

# Get some useful variables from the data. We need these later on.
taxa <- tree.taxa()


##############
# Tree model #
##############

NUM_INTERVALS = 4

# Specify a prior on the diversification and turnover rate
for (i in 1:NUM_INTERVALS) {

    diversification[i] ~ dnExp(1)
    turnover[i] ~ dnExp(1)

    # now transform the diversification and turnover rates into speciation and extinction rates
    speciation[i] := diversification[i] + turnover[i]
    extinction[i] := turnover[i]

    # create some moves that change the stochastic variables
    # all moves are sliding proposals but you could use scaling proposals for the rates too
    moves.append( mvSlide(diversification[i],delta=1,tune=true,weight=1) )
    moves.append( mvSlide(turnover[i],delta=1,tune=true,weight=1) )
    moves.append( mvScale(diversification[i],lambda=1,tune=true,weight=1) )
    moves.append( mvScale(turnover[i],lambda=1,tune=true,weight=1) )

}
# specify a prior on the root age (our informed guess is about 75-80 mya)
root <- tree.rootAge()

sampling_fraction <- 1.0


interval_times <- tree.rootAge() * (1:NUM_INTERVALS)

# construct a variable for the tree drawn from a birth death process
psi ~ dnEpisodicBirthDeath(lambdaRates=speciation, lambdaTimes=interval_times, muRates=extinction, muTimes=interval_times, rootAge=abs(root), rho=sampling_fraction, taxa=taxa, condition="nTaxa" )
#psi ~ dnEpisodicBirthDeath(lambdaRates=speciation, lambdaTimes=interval_times, muRates=extinction, muTimes=interval_times, rootAge=abs(root), rho=sampling_fraction, taxa=taxa, condition="time" )
psi.clamp( tree )




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model( root )




mymcmc = mcmc(mymodel, monitors, moves)

validation = validationAnalysis( mymcmc, NUM_VALIDATION_REPLICATES, directory="output_EBD" )
validation.burnin(generations=0.1*NUM_MCMC_ITERATIONS,tuningInterval=100)
validation.run(generations=NUM_MCMC_ITERATIONS)
validation.summarize(coverageProbability=0.9)
validation.summarize(coverageProbability=0.5)


# you may want to quit RevBayes now
q()
