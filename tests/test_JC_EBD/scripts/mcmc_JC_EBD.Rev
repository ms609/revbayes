################################################################################
#
# RevBayes Validation Test: Jukes-Cantor with birth-death process
# 
# Model: Sequences evolve under the Jukes-Cantor model and the tree is drawn
#        from a constant-rate birth-death process with uniform sampling.
#            
#
# authors: Sebastian Hoehna
#
################################################################################

seed(12345)

#######################
# Reading in the Data #
#######################

###### This just defines a single model for all sites #######

### Read in sequence data for both genes

data <- readDiscreteCharacterData("data/primates_cytb_small.nex")

# Get some useful variables from the data. We need these later on.
taxa <- data.taxa()

# set my move index
mvi = 0



######################
# Substitution Model #
######################

#### specify the Jukes-Cantor substitution model applied uniformly to all sites ###
Q <- fnJC(4) 





NUM_INTERVALS = 10


####################
# Create the rates #
####################

# specify a prior on the root age (our informed guess is about 75-80 mya)
root <- 75.0


# first we create the standard deviation of the rates between intervals
# draw the sd from an exponential distribution
speciation_sd ~ dnExponential(1.0)
moves[++mvi] = mvScale(speciation_sd,weight=10.0)

extinction_sd ~ dnExponential(1.0)
moves[++mvi] = mvScale(extinction_sd,weight=10.0)


# create a random variable at the present time
log_speciation[1] ~ dnUniform(-10.0,10.0)
log_extinction[1] ~ dnUniform(-10.0,10.0)


# apply moves on the rates
moves[++mvi] = mvSlide(log_speciation[1], weight=5)
moves[++mvi] = mvSlide(log_extinction[1], weight=5)


speciation[1] := exp( log_speciation[1] )
extinction[1] := exp( log_extinction[1] )


for (i in 1:NUM_INTERVALS) {
    index = i+1
    
    # specify normal priors (= Brownian motion) on the log of the rates
    log_speciation[index] ~ dnNormal( mean=log_speciation[i], sd=speciation_sd )
    log_extinction[index] ~ dnNormal( mean=log_extinction[i], sd=extinction_sd )

    # apply moves on the rates
    moves[++mvi] = mvSlide(log_speciation[index], weight=5)
    moves[++mvi] = mvSlide(log_extinction[index], weight=5)

    # transform the log-rate into actual rates
    speciation[index] := exp( log_speciation[index] )
    extinction[index] := exp( log_extinction[index] )

}

moves[++mvi] = mvVectorSlide(log_speciation, weight=20)
moves[++mvi] = mvVectorSlide(log_extinction, weight=20)

moves[++mvi] = mvShrinkExpand( log_speciation, sd=speciation_sd, weight=20 )
moves[++mvi] = mvShrinkExpand( log_extinction, sd=extinction_sd, weight=20 )


interval_times <- root * (1:NUM_INTERVALS) / (NUM_INTERVALS) * 0.8


rho <- taxa.size() / 367


# construct a variable for the tree drawn from a birth death process
psi ~ dnEpisodicBirthDeath(rootAge=root, lambdaRates=speciation, lambdaTimes=interval_times, muRates=extinction, muTimes=interval_times, rho=rho, samplingStrategy="uniform", condition="survival", taxa=taxa)

moves[++mvi] = mvNarrow(psi, weight=5.0)
moves[++mvi] = mvNNI(psi, weight=1.0)
moves[++mvi] = mvFNPR(psi, weight=3.0)
moves[++mvi] = mvSubtreeScale(psi, weight=3.0)
moves[++mvi] = mvNodeTimeSlideUniform(psi, weight=15.0)






###################
# PhyloCTMC Model #
###################

# We use an empirical estimate of the clock rate which is 0.01 (=1%) per million years per site
clockRate <- 0.005

# the sequence evolution model
seq ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=clockRate, type="DNA")

# attach the data
seq.clamp(data)




#############
# THE Model #
#############

# We define our model.
# We can use any node of our model as a handle, here we chose to use the rate matrix.
mymodel = model(Q)


monitors[1] = mnStochasticVariable(filename="output/mcmc_JC_EBD.out",printgen=1, separator = TAB)

mymcmc = mcmc(mymodel, monitors, moves, moveschedule="single")


mymcmc.run(generations=1000)


# you may want to quit RevBayes now
q()

